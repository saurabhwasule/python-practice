Microsoft Windows [Version 6.3.9600]
(c) 2013 Microsoft Corporation. All rights reserved.

D:\PPT>cd python/hands

D:\PPT\python\hands>python
Python 3.5.2 (v3.5.2:4def2a2901a5, Jun 25 2016, 22:18:55) [M
SC v.1900 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more in
formation.
>>> l = [1,2,3,4]
>>> res = []
>>> for e in l:
...     res.append(e*e)
...
>>> res
[1, 4, 9, 16]
>>> res = [ e*e for e in l]
>>> res
[1, 4, 9, 16]
>>> { e*e for e in l}
{16, 1, 4, 9}
>>> { e:e*e for e in l}
{1: 1, 2: 4, 3: 9, 4: 16}
>>> [ e*e for e in l if e%2 == 1]
[1, 9]
>>> [ (e,e1) for e in l if e%2 == 1 for e1 in l if e1%2 ==0]

[(1, 2), (1, 4), (3, 2), (3, 4)]
>>> s = "Hello World"
>>> d = { e:s.count(e)   for e in s}
>>> d
{'l': 3, 'H': 1, 'o': 2, 'd': 1, 'e': 1, 'r': 1, 'W': 1, ' '
: 1}
>>> 5*5 == 3*3 + 4*4
True
>>> #(x,y,z) z*z == x*x + y*y
...
>>> list(range(1,100))
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,
33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62,
63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,
78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92,
93, 94, 95, 96, 97, 98, 99]
>>> [(x,y,z)  for x in range(1,100) for y in (1,100) for z i
n range(1,100) if z*z == x*x + y*y and z > y > x]
[]
>>> [(x,y,z)  for x in range(1,100) for y in range(1,100) fo
r z in range(1,100) if z*z == x*x + y*y and z > y > x]
[(3, 4, 5), (5, 12, 13), (6, 8, 10), (7, 24, 25), (8, 15, 17
), (9, 12, 15), (9, 40, 41), (10, 24, 26), (11, 60, 61), (12
, 16, 20), (12, 35, 37), (13, 84, 85), (14, 48, 50), (15, 20
, 25), (15, 36, 39), (16, 30, 34), (16, 63, 65), (18, 24, 30
), (18, 80, 82), (20, 21, 29), (20, 48, 52), (21, 28, 35), (
21, 72, 75), (24, 32, 40), (24, 45, 51), (24, 70, 74), (25,
60, 65), (27, 36, 45), (28, 45, 53), (30, 40, 50), (30, 72,
78), (32, 60, 68), (33, 44, 55), (33, 56, 65), (35, 84, 91),
 (36, 48, 60), (36, 77, 85), (39, 52, 65), (39, 80, 89), (40
, 42, 58), (40, 75, 85), (42, 56, 70), (45, 60, 75), (48, 55
, 73), (48, 64, 80), (51, 68, 85), (54, 72, 90), (57, 76, 95
), (60, 63, 87), (65, 72, 97)]
>>>
>>> list(zip([10,20,30],[100,200,300]))
[(10, 100), (20, 200), (30, 300)]
>>> dict(zip([10,20,30],[100,200,300]))
{10: 100, 20: 200, 30: 300}
>>> list(enumerate([10,20,30]))
[(0, 10), (1, 20), (2, 30)]
>>> import glob
>>> glob.glob("*")
['data', 'DAY1.txt', 'first.py', 'quick_datastructure.txt',
'reference', 'syn.txt']
>>> f = open(r"DAY1.txt", "rt")
>>> lines = f.readlines()
>>> f.close()
>>> len(lines)
879
>>> lines[0]
'Microsoft Windows [Version 6.3.9600]\n'
>>> type(lines)
<class 'list'>
>>> dir(f)
['_CHUNK_SIZE', '__class__', '__del__', '__delattr__', '__di
ct__', '__dir__', '__doc__', '__enter__', '__eq__', '__exit_
_', '__format__', '__ge__', '__getattribute__', '__getstate_
_', '__gt__', '__hash__', '__init__', '__iter__', '__le__',
'__lt__', '__ne__', '__new__', '__next__', '__reduce__', '__
reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__st
r__', '__subclasshook__', '_checkClosed', '_checkReadable',
'_checkSeekable', '_checkWritable', '_finalizing', 'buffer',
 'close', 'closed', 'detach', 'encoding', 'errors', 'fileno'
, 'flush', 'isatty', 'line_buffering', 'mode', 'name', 'newl
ines', 'read', 'readable', 'readline', 'readlines', 'seek',
'seekable', 'tell', 'truncate', 'writable', 'write', 'writel
ines']
>>> f = open(r"DAY1.txt.bak", "w")
>>> f.writelines(lines)
>>> f.close()
>>> glob.glob("*")
['data', 'DAY1.txt', 'DAY1.txt.bak', 'first.py', 'quick_data
structure.txt', 'reference', 'syn.txt']
>>> f = open(r"DAY1.txt.bak", "a")
>>> f.writelines(["few more lines", "few"])
>>> f.close()
>>> with open(r"DAY1.txt","rt") as f:
...     lines = f.readlines()
...
>>> glob.glob(r"data\*")
['data\\example-handson.csv', 'data\\example-handson.xml', '
data\\example.csv', 'data\\example.json', 'data\\example.xml
', 'data\\example_1.csv']
>>> f = open(r"data\example.json", "rt")
>>> import json
>>> obj = json.load(f)
>>> f.close()
>>> obj
[{'details': {'address': {'postalCode': '10021-3100', 'state
': 'NY', 'streetAddress': '21 2nd Street', 'city': 'New York
'}, 'salary': 123.5, 'spouse': None, 'phoneNumbers': [{'numb
er': '212 555-1234', 'type': 'home'}, {'number': '646 555-45
67', 'type': 'office'}, {'number': '123 456-7890', 'type': '
mobile'}], 'firstName': 'John', 'children': [], 'isAlive': T
rue, 'lastName': 'Smith', 'age': 25}, 'empId': 1}, {'details
': {'address': {'postalCode': '10021-3100', 'state': 'CL', '
streetAddress': '21 2nd Street', 'city': 'New York'}, 'salar
y': 123.5, 'spouse': None, 'phoneNumbers': [{'number': '212
555-1234', 'type': 'home'}, {'number': '646 555-4567', 'type
': 'office'}, {'number': '123 456-7890', 'type': 'mobile'}],
 'firstName': 'Johns', 'children': [], 'isAlive': True, 'las
tName': 'Smith', 'age': 25}, 'empId': 20}]
>>>
>>> type(obj)
<class 'list'>
>>> type(obj[0])
<class 'dict'>
>>> [ emp['empId'] for emp in obj]
[1, 20]
>>> obj[0].keys()
dict_keys(['details', 'empId'])
>>> [ emp['details']['firstName'] for emp in obj]
['John', 'Johns']
>>> [ emp['details']['firstName'] + emp['details']['lastName
']for emp in obj]
['JohnSmith', 'JohnsSmith']
>>> [ ph['number'] for emp in obj for ph  in emp['details'][
'phoneNumbers']]
['212 555-1234', '646 555-4567', '123 456-7890', '212 555-12
34', '646 555-4567', '123 456-7890']
>>> [ ph['number'] for emp in obj for ph  in emp['details'][
'phoneNumbers'] if ph['type'] == 'office']
['646 555-4567', '646 555-4567']
>>> import xml.etree.ElementTree as ET
>>> tr = ET.parse(r"data\example.xml")
>>> r = tr.getroot()
>>> type(r)
<class 'xml.etree.ElementTree.Element'>
>>> r.tag, r.attrib, r.text
('data', {}, '\n    ')
>>> [ rn.text for rn in r.findall("./country/rank")]
['1', '4', '68']
>>> [ int(rn.text) for rn in r.findall("./country/rank")]
[1, 4, 68]
>>> r.findall("./country/rank")
[<Element 'rank' at 0x0000009698EF7368>, <Element 'rank' at
0x0000009698EF7548>, <Element 'rank' at 0x0000009698EF76D8>]

>>> r.findall(".//rank")
[<Element 'rank' at 0x0000009698EF7368>, <Element 'rank' at
0x0000009698EF7548>, <Element 'rank' at 0x0000009698EF76D8>]

>>> { c.attrib['name'] : n.attrib['name'] for c in r.findall
("./country") for n in c.findall("./neighbor")}
{'Liechtenstein': 'Switzerland', 'Panama': 'Colombia', 'Sing
apore': 'Malaysia'}
>>> { c.attrib['name'] :[ n.attrib['name'] for n in c.findal
l("./neighbor") ] for c in r.findall("./country") }
{'Liechtenstein': ['Austria', 'Switzerland'], 'Panama': ['Co
sta Rica', 'Colombia'], 'Singapore': ['Malaysia']}
>>> [ c.attrib['name'] for for c in r.findall("./country")]
  File "<stdin>", line 1
    [ c.attrib['name'] for for c in r.findall("./country")]
                             ^
SyntaxError: invalid syntax
>>> [ c.attrib['name']  for c in r.findall("./country")]
['Liechtenstein', 'Singapore', 'Panama']
>>> import csv
>>> f = open(r"data\example.csv", "rt")
>>> dir(csv)
['Dialect', 'DictReader', 'DictWriter', 'Error', 'QUOTE_ALL'
, 'QUOTE_MINIMAL', 'QUOTE_NONE', 'QUOTE_NONNUMERIC', 'Sniffe
r', 'StringIO', '_Dialect', '__all__', '__builtins__', '__ca
ched__', '__doc__', '__file__', '__loader__', '__name__', '_
_package__', '__spec__', '__version__', 'excel', 'excel_tab'
, 'field_size_limit', 'get_dialect', 'list_dialects', 're',
'reader', 'register_dialect', 'unix_dialect', 'unregister_di
alect', 'writer']
>>> rd = csv.reader(f)
>>> dir(rd)
['__class__', '__delattr__', '__dir__', '__doc__', '__eq__',
 '__format__', '__ge__', '__getattribute__', '__gt__', '__ha
sh__', '__init__', '__iter__', '__le__', '__lt__', '__ne__',
 '__new__', '__next__', '__reduce__', '__reduce_ex__', '__re
pr__', '__setattr__', '__sizeof__', '__str__', '__subclassho
ok__', 'dialect', 'line_num']
>>> rows = list(rd)
>>> rows
[['Spam', ' Spam', ' Spam', ' Spam', ' Spam', ' Baked Beans'
], ['Spam', ' Lovely Spam', ' Wonderful Spam']]
>>> len(rows)
2
>>> [ row[0] for row in rows]
['Spam', 'Spam']
>>> [ row[0:2] for row in rows]
[['Spam', ' Spam'], ['Spam', ' Lovely Spam']]
>>> import pandas as pd
>>> df = pd.read_csv(r"data\example.csv")
>>> df.iloc[0:2]
   Spam          Spam           Spam.1   Spam.2   Spam.3   B
aked Beans
0  Spam   Lovely Spam   Wonderful Spam      NaN      NaN
       NaN
>>> import sys.
  File "<stdin>", line 1
    import sys.
              ^
SyntaxError: invalid syntax
>>> import sys
>>> dir(sys)
['__displayhook__', '__doc__', '__excepthook__', '__interact
ivehook__', '__loader__', '__name__', '__package__', '__spec
__', '__stderr__', '__stdin__', '__stdout__', '_clear_type_c
ache', '_current_frames', '_debugmallocstats', '_getframe',
'_home', '_mercurial', '_xoptions', 'api_version', 'argv', '
base_exec_prefix', 'base_prefix', 'builtin_module_names', 'b
yteorder', 'call_tracing', 'callstats', 'copyright', 'displa
yhook', 'dllhandle', 'dont_write_bytecode', 'exc_info', 'exc
epthook', 'exec_prefix', 'executable', 'exit', 'flags', 'flo
at_info', 'float_repr_style', 'get_coroutine_wrapper', 'geta
llocatedblocks', 'getcheckinterval', 'getdefaultencoding', '
getfilesystemencoding', 'getprofile', 'getrecursionlimit', '
getrefcount', 'getsizeof', 'getswitchinterval', 'gettrace',
'getwindowsversion', 'hash_info', 'hexversion', 'implementat
ion', 'int_info', 'intern', 'is_finalizing', 'last_traceback
', 'last_type', 'last_value', 'maxsize', 'maxunicode', 'meta
_path', 'modules', 'path', 'path_hooks', 'path_importer_cach
e', 'platform', 'prefix', 'ps1', 'ps2', 'set_coroutine_wrapp
er', 'setcheckinterval', 'setprofile', 'setrecursionlimit',
'setswitchinterval', 'settrace', 'stderr', 'stdin', 'stdout'
, 'thread_info', 'version', 'version_info', 'warnoptions', '
winver']
>>> sys.stdin
<_io.TextIOWrapper name='<stdin>' mode='r' encoding='cp437'>

>>> sys.stdout
<_io.TextIOWrapper name='<stdout>' mode='w' encoding='cp437'
>
>>> sys.stderr
<_io.TextIOWrapper name='<stderr>' mode='w' encoding='cp437'
>
>>> s = sys.stdin.readline()
123
>>> s
'123\n'
>>> sys.stdout.writelines(["OK\n"])
OK
>>> print("OK")
OK
>>> s = input("Give a number:")
Give a number:123
>>> s
'123'
>>> sys.version
'3.5.2 (v3.5.2:4def2a2901a5, Jun 25 2016, 22:18:55) [MSC v.1
900 64 bit (AMD64)]'
>>> import os
>>> dir(os)
['F_OK', 'MutableMapping', 'O_APPEND', 'O_BINARY', 'O_CREAT'
, 'O_EXCL', 'O_NOINHERIT', 'O_RANDOM', 'O_RDONLY', 'O_RDWR',
 'O_SEQUENTIAL', 'O_SHORT_LIVED', 'O_TEMPORARY', 'O_TEXT', '
O_TRUNC', 'O_WRONLY', 'P_DETACH', 'P_NOWAIT', 'P_NOWAITO', '
P_OVERLAY', 'P_WAIT', 'R_OK', 'SEEK_CUR', 'SEEK_END', 'SEEK_
SET', 'TMP_MAX', 'W_OK', 'X_OK', '_DummyDirEntry', '_Environ
', '__all__', '__builtins__', '__cached__', '__doc__', '__fi
le__', '__loader__', '__name__', '__package__', '__spec__',
'_dummy_scandir', '_execvpe', '_exists', '_exit', '_get_expo
rts_list', '_putenv', '_unsetenv', '_wrap_close', 'abort', '
access', 'altsep', 'chdir', 'chmod', 'close', 'closerange',
'cpu_count', 'curdir', 'defpath', 'device_encoding', 'devnul
l', 'dup', 'dup2', 'environ', 'errno', 'error', 'execl', 'ex
ecle', 'execlp', 'execlpe', 'execv', 'execve', 'execvp', 'ex
ecvpe', 'extsep', 'fdopen', 'fsdecode', 'fsencode', 'fstat',
 'fsync', 'ftruncate', 'get_exec_path', 'get_handle_inherita
ble', 'get_inheritable', 'get_terminal_size', 'getcwd', 'get
cwdb', 'getenv', 'getlogin', 'getpid', 'getppid', 'isatty',
'kill', 'linesep', 'link', 'listdir', 'lseek', 'lstat', 'mak
edirs', 'mkdir', 'name', 'open', 'pardir', 'path', 'pathsep'
, 'pipe', 'popen', 'putenv', 'read', 'readlink', 'remove', '
removedirs', 'rename', 'renames', 'replace', 'rmdir', 'scand
ir', 'sep', 'set_handle_inheritable', 'set_inheritable', 'sp
awnl', 'spawnle', 'spawnv', 'spawnve', 'st', 'startfile', 's
tat', 'stat_float_times', 'stat_result', 'statvfs_result', '
strerror', 'supports_bytes_environ', 'supports_dir_fd', 'sup
ports_effective_ids', 'supports_fd', 'supports_follow_symlin
ks', 'symlink', 'sys', 'system', 'terminal_size', 'times', '
times_result', 'truncate', 'umask', 'uname_result', 'unlink'
, 'urandom', 'utime', 'waitpid', 'walk', 'write']
>>>
>>> import xml.etree.ElementTree as ET
>>> import sys
>>> sys.version
'3.5.2 (v3.5.2:4def2a2901a5, Jun 25 2016, 22:18:55) [MSC v.1
900 64 bit (AMD64)]'
>>> import sys as s
>>> s.version
'3.5.2 (v3.5.2:4def2a2901a5, Jun 25 2016, 22:18:55) [MSC v.1
900 64 bit (AMD64)]'
>>> import os
>>> os.popen
<function popen at 0x0000009698DE4D90>
>>> with os.popen("dir", "r") as f:
...     lines = f.readlines()
...
>>> lines
[' Volume in drive D is Data\n', ' Volume Serial Number is 1
A08-0D68\n', '\n', ' Directory of D:\\PPT\\python\\hands\n',
 '\n', '13-02-2018  11:32    <DIR>          .\n', '13-02-201
8  11:32    <DIR>          ..\n', '11-12-2017  17:40    <DIR
>          data\n', '12-02-2018  17:29            17,585 DAY
1.txt\n', '13-02-2018  11:09            17,602 DAY1.txt.bak\
n', '13-02-2018  10:05             1,139 first.py\n', '12-02
-2018  19:00            65,887 hands-reference.docx\n', '21-
11-2017  19:51             3,340 quick_datastructure.txt\n',
 '11-12-2017  17:41    <DIR>          reference\n', '13-12-2
017  11:28             7,423 syn.txt\n', '               6 F
ile(s)        112,976 bytes\n', '               4 Dir(s)  19
6,829,630,464 bytes free\n']
>>> s = "11-12-2017  17:40    <DIR>          data"
>>> s.split()[0]
'11-12-2017'
>>> [ s.split()[0]  for s in lines[5:-2] ]
['13-02-2018', '13-02-2018', '11-12-2017', '12-02-2018', '13
-02-2018', '13-02-2018', '12-02-2018', '21-11-2017', '11-12-
2017', '13-12-2017']
>>> [ s.split()[0]  for s in lines ]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 1, in <listcomp>
IndexError: list index out of range
>>> "".split()
[]
>>> [ s.split()[0]  for s in lines[5:-2] ]
['13-02-2018', '13-02-2018', '11-12-2017', '12-02-2018', '13
-02-2018', '13-02-2018', '12-02-2018', '21-11-2017', '11-12-
2017', '13-12-2017']
>>>
>>>
>>>
>>> import math
>>> dir(math)
['__doc__', '__loader__', '__name__', '__package__', '__spec
__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'ata
nh', 'ceil', 'copysign', 'cos', 'cosh', 'degrees', 'e', 'erf
', 'erfc', 'exp', 'expm1', 'fabs', 'factorial', 'floor', 'fm
od', 'frexp', 'fsum', 'gamma', 'gcd', 'hypot', 'inf', 'isclo
se', 'isfinite', 'isinf', 'isnan', 'ldexp', 'lgamma', 'log',
 'log10', 'log1p', 'log2', 'modf', 'nan', 'pi', 'pow', 'radi
ans', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'trunc']
>>> import time
>>> dir(time)
['_STRUCT_TM_ITEMS', '__doc__', '__loader__', '__name__', '_
_package__', '__spec__', 'altzone', 'asctime', 'clock', 'cti
me', 'daylight', 'get_clock_info', 'gmtime', 'localtime', 'm
ktime', 'monotonic', 'perf_counter', 'process_time', 'sleep'
, 'strftime', 'strptime', 'struct_time', 'time', 'timezone',
 'tzname']
>>> time.sleep(2)
>>> import datetime
>>> dir(datetime)
['MAXYEAR', 'MINYEAR', '__builtins__', '__cached__', '__doc_
_', '__file__', '__loader__', '__name__', '__package__', '__
spec__', '_divide_and_round', 'date', 'datetime', 'datetime_
CAPI', 'time', 'timedelta', 'timezone', 'tzinfo']
>>> d = datetime.date.today()
>>> d
datetime.date(2018, 2, 13)
>>> d + datetime.timedelta(days=365)
datetime.date(2019, 2, 13)
>>> d - _
datetime.timedelta(-365)
>>> _
datetime.timedelta(-365)
>>> import pkg.mex
>>> pkg.mex.square(39)
1521
>>> help(pkg.mex)
Help on module pkg.mex in pkg:

NAME
    pkg.mex

FUNCTIONS
    square(x)
        My first function!!!!......

FILE
    d:\ppt\python\hands\pkg\mex.py


>>> help(pkg.mex.square)
Help on function square in module pkg.mex:

square(x)
    My first function!!!!......

>>> help(print)
Help on built-in function print in module builtins:

print(...)
    print(value, ..., sep=' ', end='\n', file=sys.stdout, fl
ush=False)

    Prints the values to a stream, or to sys.stdout by defau
lt.
    Optional keyword arguments:

>>> import sys
>>> sys.path
['', 'C:\\Python35\\python35.zip', 'C:\\Python35\\DLLs', 'C:
\\Python35\\lib', 'C:\\Python35', 'C:\\Python35\\lib\\site-p
ackages']
>>> def add(x,y):
...     return x+y
...
>>> add(2,3)
5
>>> add(y=3,x=2)
5
>>> add(3,y=3)
6
>>> def add(x,y=10):
...     return x+y
...
>>> add(2)
12
>>> add(2,25)
27
>>> x = 2
>>> type(x) is int
True
>>>
>>> a = 2
>>> b = 1
>>> a,b = b,a
>>> a
1
>>> b
2
>>> a,*b,c = 1,2,3,4
>>> a,b,c
(1, [2, 3], 4)
>>> a,*b,c = 1,2
>>> a,b,c
(1, [], 2)
>>> def f(a,b=0,*c):
...     return [a,b,c]
...
>>> f(1)
[1, 0, ()]
>>> f(1,2,3,4)
[1, 2, (3, 4)]
>>> def f(*c):
...     return c
...
>>> f(1)
(1,)
>>>
>>> f(1,2,3)
(1, 2, 3)
>>> type( () )
<class 'tuple'>
>>> type( (1) )
<class 'int'>
>>> type( (1,) )
<class 'tuple'>
>>> l = [1,2,3,4]
>>> f(l)
([1, 2, 3, 4],)
>>> f(*l)
(1, 2, 3, 4)
>>> sum(l)
10
>>> sum(1,2,3,4)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: sum expected at most 2 arguments, got 4
>>> quit()

D:\PPT\python\hands>python
Python 3.5.2 (v3.5.2:4def2a2901a5, Jun 25 2016, 22:18:55) [M
SC v.1900 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more in
formation.
>>> import pkg.mex
>>> pkg.mex.mysum(1,2,3,4,5)
15
>>> pkg.mex.mysum( 1,2,3,4,5, (3,5)  )
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "D:\PPT\python\hands\pkg\mex.py", line 7, in mysum
    return sum(args)
TypeError: unsupported operand type(s) for +: 'int' and 'tup
le'
>>> sum( (1,2,3,4,5, (3,5)  ) )
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unsupported operand type(s) for +: 'int' and 'tup
le'
>>> pkg.mex.mysum( 1,2,3,4,5, *(3,5)  )
23
>>> l = [1,2,3,4]
>>> mysum(*l)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'mysum' is not defined
>>> pkg.mex.mysum(*l)
10
>>>
>>> quit()

D:\PPT\python\hands>python
Python 3.5.2 (v3.5.2:4def2a2901a5, Jun 25 2016, 22:18:55) [M
SC v.1900 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more in
formation.
>>> import pkg.mex
>>> pkg.mex.freq("Hello")
{'H': 1, 'o': 1, 'e': 1, 'l': 2}
>>> pkg.mex.freq("Hello Hello")
{'H': 2, ' ': 1, 'o': 2, 'e': 2, 'l': 4}
>>> pkg.mex.freq("Hello Hello".split())
{'Hello': 2}
>>> str.count
<method 'count' of 'str' objects>
>>> list.count
<method 'count' of 'list' objects>
>>> help(str.split)
Help on method_descriptor:

split(...)
    S.split(sep=None, maxsplit=-1) -> list of strings

    Return a list of the words in S, using sep as the
    delimiter string.  If maxsplit is given, at most maxspli
t
    splits are done. If sep is not specified or is None, any
    whitespace string is a separator and empty strings are
    removed from the result.

>>>
>>>
>>> list
<class 'list'>
>>> sum
<built-in function sum>
>>> def p():
...     print(y)
...
>>>
>>> y
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'y' is not defined
>>> p()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 2, in p
NameError: name 'y' is not defined
>>> y= 10
>>> p()
10
>>> def p():
...     print(y)
...
>>> def p(y):
...     print(y)
...
>>> y
10
>>> p(30)
30
>>> def p(y):
...     print(x+y)
...
>>> x = 100
>>> p(20)
120
>>> x =2
>>> p(20)
22
>>> list = [1,2,3,4]
>>> list( (1,2,3,4) )
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'list' object is not callable
>>> del list
>>> list( (1,2,3,4) )
[1, 2, 3, 4]
>>>
>>> def add(x,y):
...     return x+y
...
>>> type(add)
<class 'function'>
>>> def f(x):
...     def g(y):
...             return x+y
...     return g
...
>>> f(2)(3)
5
>>> f(2)
<function f.<locals>.g at 0x00000079DA273F28>
>>> type(f(2))
<class 'function'>
>>> f(2)(3)
5
>>> 1
1
>>> a = 1
>>> a
1
>>> 1
1
>>> add1 = lambda x,y : x+y
>>> add1(2,3)
5
>>> add(2,3)
5
>>> type(add)
<class 'function'>
>>> type(add1)
<class 'function'>
>>> lambda x,y : x+y
<function <lambda> at 0x00000079DA27B0D0>
>>> def func(x,y,z):
...     return x(y,z)
...
>>> func(add,2,3)
5
>>> func(lambda x,y: x*y,2,3)
6
>>> func(add1,2,3)
5
>>> func(lambda x,y: x-y,2,3)
-1
>>> list(map(lambda x: x*x , [1,2,3]))
[1, 4, 9]
>>> res = []
>>> l = [1,2,3]
>>> for e in l:
...     res.append(e*e)
...
>>> res
[1, 4, 9]
>>> [e*e for e in l]
[1, 4, 9]
>>> list(map(lambda x: x*x , l))
[1, 4, 9]
>>> filter
<class 'filter'>
>>> import functools
>>> functools.reduce
<built-in function reduce>
>>> functools.reduce(lambda r,e : r+e, l, 0)
6
>>> help(functools.reduce)
Help on built-in function reduce in module _functools:

reduce(...)
    reduce(function, sequence[, initial]) -> value

    Apply a function of two arguments cumulatively to the it
ems of a sequence,
    from left to right, so as to reduce the sequence to a si
ngle value.
    For example, reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) c
alculates
    ((((1+2)+3)+4)+5).  If initial is present, it is placed
before the items
    of the sequence in the calculation, and serves as a defa
ult when the
    sequence is empty.

>>> l = [1,2,3,1,5,6,2]
>>> sorted(l)
[1, 1, 2, 2, 3, 5, 6]
>>> sorted(l, reverse=True)
[6, 5, 3, 2, 2, 1, 1]
>>> sl = ['a','bb','c','xyzl']
>>> sorted(sl)
['a', 'bb', 'c', 'xyzl']
>>> help(sorted)
Help on built-in function sorted in module builtins:

sorted(iterable, key=None, reverse=False)
    Return a new list containing all items from the iterable
 in ascending order.

    A custom key function can be supplied to customise the s
ort order, and the
    reverse flag can be set to request the result in descend
ing order.

>>> sorted(sl, key=lambda e: len(e))
['a', 'c', 'bb', 'xyzl']
>>> (1,2) < (2,3)
True
>>> (1,2) < (1,1)
False
>>> sorted(sl, key=lambda e: (len(e), e) )
['a', 'c', 'bb', 'xyzl']
>>> s = [ ("ABC", 100), ("XYZ", 10)]
>>> sorted(s)
[('ABC', 100), ('XYZ', 10)]
>>> sorted(s, key=lambda e: e[1])
[('XYZ', 10), ('ABC', 100)]
>>> from operator import itemgetter
>>> sorted(s, key=itemgetter(1))
[('XYZ', 10), ('ABC', 100)]
>>> sorted(s, key=itemgetter(1,0))
[('XYZ', 10), ('ABC', 100)]
>>>




















































